/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fop.project_cleaner.ui;

import static fop.project_cleaner.LanguageMode.JAVA;
import static fop.project_cleaner.LanguageMode.RACKET;

import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.nio.file.Files;

import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIDefaults;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.plaf.ColorUIResource;
import javax.swing.text.DefaultCaret;

import fop.project_cleaner.LanguageMode;

/**
 *
 * @author ruben
 */
@SuppressWarnings("serial")
public class MainGui extends javax.swing.JFrame {

	private LanguageMode currentMode = JAVA;
	private boolean menuExpanded = false;
	private String lastDirectory;

	/**
	 * Creates new form MainGui
	 */
	public MainGui() {
		initComponents();
		setLocationRelativeTo(null);
		// Fix JTextPane Background Color
		Color bgColor = Color.BLACK;
		UIDefaults defaults = new UIDefaults();
		defaults.put("TextPane.background", new ColorUIResource(bgColor));
		defaults.put("TextPane[Enabled].backgroundPainter", bgColor);
		logTextPane.putClientProperty("Nimbus.Overrides", defaults);
		logTextPane.putClientProperty("Nimbus.Overrides.InheritDefaults", true);
		logTextPane.setBackground(bgColor);
		// Listen for File Path changes
		DocumentListener filePathUpdateListener = new DocumentListener() {
			@Override
			public void insertUpdate(DocumentEvent e) {
				updateExecuteButtonState();
			}

			@Override
			public void removeUpdate(DocumentEvent e) {
				updateExecuteButtonState();
			}

			@Override
			public void changedUpdate(DocumentEvent e) {
				updateExecuteButtonState();
			}
		};
		submissionsFileField.getDocument().addDocumentListener(filePathUpdateListener);
		outputDirectoryField.getDocument().addDocumentListener(filePathUpdateListener);
		solutionFileField.getDocument().addDocumentListener(filePathUpdateListener);
		fileListFileField.getDocument().addDocumentListener(filePathUpdateListener);
		// Make Scroll Pane Scroll down automatically
		((DefaultCaret) logTextPane.getCaret()).setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
		System.setOut(getOut());
		System.setErr(getErr());
	}

	public MainGui(String submissionFile, String solutionFile, String fileListFile, String outputDir) {
		this();
		setSubmissionFile(submissionFile);
		setSolutionFile(solutionFile);
		setFileList(fileListFile);
		setOutputDirectory(outputDir);
	}

	public PrintStream getOut() {
		return new PrintStream(new TextPaneStream(logTextPane), true);
	}

	public PrintStream getErr() {
		return new PrintStream(new TextPaneStream(logTextPane, Color.RED), true);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */

	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		buttonGroup1 = new javax.swing.ButtonGroup();
		jSeparator1 = new javax.swing.JSeparator();
		jPanel1 = new javax.swing.JPanel();
		MenuIconLabel = new javax.swing.JLabel();
		settingsIconLabel = new javax.swing.JLabel();
		saveLogIconLabel = new javax.swing.JLabel();
		jPanel3 = new javax.swing.JPanel();
		jLabel1 = new javax.swing.JLabel();
		jPanel2 = new javax.swing.JPanel();
		RacketModeRadioButton = new javax.swing.JRadioButton();
		JavaModeRadioButton = new javax.swing.JRadioButton();
		submissionsFileField = new javax.swing.JTextField();
		jLabel2 = new javax.swing.JLabel();
		submissionsFileChooserButton = new javax.swing.JButton();
		outputDirectoryChooserButton = new javax.swing.JButton();
		outputDirectoryField = new javax.swing.JTextField();
		jLabel3 = new javax.swing.JLabel();
		jLabel4 = new javax.swing.JLabel();
		solutionFileField = new javax.swing.JTextField();
		solutionFileFieldChooserButton = new javax.swing.JButton();
		jLabel5 = new javax.swing.JLabel();
		fileListFileField = new javax.swing.JTextField();
		fileListFileChooserButton = new javax.swing.JButton();
		jProgressBar1 = new javax.swing.JProgressBar();
		jScrollPane2 = new javax.swing.JScrollPane();
		logTextPane = new javax.swing.JTextPane();
		executeButton = new javax.swing.JButton();
		jPanel4 = new javax.swing.JPanel();
		saveLogLabel = new javax.swing.JLabel();
		menuLabel = new javax.swing.JLabel();
		settingsLabel = new javax.swing.JLabel();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("FOP-Korrekturhelfer im Java-Modus");
		setBackground(new java.awt.Color(17, 25, 37));
		setForeground(new java.awt.Color(17, 25, 37));
		setMinimumSize(new java.awt.Dimension(700, 500));
		addComponentListener(new java.awt.event.ComponentAdapter() {
			public void componentResized(java.awt.event.ComponentEvent evt) {
				WindowResized(evt);
			}
		});

		jPanel1.setBackground(new java.awt.Color(11, 18, 35));

		MenuIconLabel
				.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-menü-30.png")));
		MenuIconLabel.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				MenuIconLabelMouseClicked(evt);
			}
		});

		settingsIconLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		settingsIconLabel.setIcon(
				new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-einstellungen-30.png")));
		settingsIconLabel.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				settingsIconLabelMouseClicked(evt);
			}
		});

		saveLogIconLabel.setIcon(new javax.swing.ImageIcon(
				getClass().getResource("/icons/icons8-speichern-&-schließen-30.png")));
		saveLogIconLabel.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				saveLogIconLabelMouseClicked(evt);
			}
		});

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup().addContainerGap().addGroup(jPanel1Layout
						.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(jPanel1Layout.createSequentialGroup().addComponent(settingsIconLabel).addGap(0, 0,
								Short.MAX_VALUE))
						.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
								.addGap(0, 0, Short.MAX_VALUE)
								.addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(MenuIconLabel, javax.swing.GroupLayout.Alignment.TRAILING)
										.addComponent(saveLogIconLabel, javax.swing.GroupLayout.Alignment.TRAILING))))
						.addContainerGap()));
		jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel1Layout.createSequentialGroup().addGap(28, 28, 28).addComponent(MenuIconLabel)
						.addGap(18, 18, 18).addComponent(saveLogIconLabel)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 324, Short.MAX_VALUE)
						.addComponent(settingsIconLabel).addGap(18, 18, 18)));

		jPanel3.setBackground(new java.awt.Color(14, 28, 64));

		jLabel1.setFont(new java.awt.Font("Dialog", 1, 36)); // NOI18N
		jLabel1.setForeground(new java.awt.Color(238, 238, 238));
		jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
		jLabel1.setLabelFor(jPanel3);
		jLabel1.setText("FOP-Korrekturhelfer");

		javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
		jPanel3.setLayout(jPanel3Layout);
		jPanel3Layout.setHorizontalGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel3Layout.createSequentialGroup().addContainerGap(125, Short.MAX_VALUE)
						.addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 467, Short.MAX_VALUE)
						.addContainerGap(126, Short.MAX_VALUE)));
		jPanel3Layout.setVerticalGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
						jPanel3Layout.createSequentialGroup()
								.addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE)
								.addContainerGap()));

		jPanel2.setBackground(new java.awt.Color(28, 38, 64));

		buttonGroup1.add(RacketModeRadioButton);
		RacketModeRadioButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
		RacketModeRadioButton.setForeground(new java.awt.Color(255, 255, 255));
		RacketModeRadioButton.setText("Racket Mode");
		RacketModeRadioButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				RacketModeRadioButtonActionPerformed(evt);
			}
		});

		buttonGroup1.add(JavaModeRadioButton);
		JavaModeRadioButton.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
		JavaModeRadioButton.setForeground(new java.awt.Color(255, 255, 255));
		JavaModeRadioButton.setSelected(true);
		JavaModeRadioButton.setText("Java Mode");
		JavaModeRadioButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				JavaModeRadioButtonActionPerformed(evt);
			}
		});

		submissionsFileField.setBackground(new java.awt.Color(0, 34, 44));
		submissionsFileField.setForeground(new java.awt.Color(255, 255, 255));
		submissionsFileField.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				submissionsFileFieldActionPerformed(evt);
			}
		});

		jLabel2.setFont(new java.awt.Font("FiraCode Nerd Font Mono", 1, 14)); // NOI18N
		jLabel2.setForeground(new java.awt.Color(255, 255, 255));
		jLabel2.setText("Abgabeverzeichnis:");

		submissionsFileChooserButton.setBackground(new java.awt.Color(0, 23, 38));
		submissionsFileChooserButton.setForeground(new java.awt.Color(255, 255, 255));
		submissionsFileChooserButton.setText("Wählen");
		submissionsFileChooserButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				submissionsFileChooserButtonActionPerformed(evt);
			}
		});

		outputDirectoryChooserButton.setBackground(new java.awt.Color(0, 23, 38));
		outputDirectoryChooserButton.setForeground(new java.awt.Color(255, 255, 255));
		outputDirectoryChooserButton.setText("Wählen");
		outputDirectoryChooserButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				outputDirectoryChooserButtonActionPerformed(evt);
			}
		});

		outputDirectoryField.setBackground(new java.awt.Color(0, 34, 44));
		outputDirectoryField.setForeground(new java.awt.Color(255, 255, 255));
		outputDirectoryField.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				outputDirectoryFieldActionPerformed(evt);
			}
		});

		jLabel3.setFont(new java.awt.Font("FiraCode Nerd Font Mono", 1, 14)); // NOI18N
		jLabel3.setForeground(new java.awt.Color(255, 255, 255));
		jLabel3.setText("Ausgabeordner:");

		jLabel4.setFont(new java.awt.Font("FiraCode Nerd Font Mono", 1, 14)); // NOI18N
		jLabel4.setForeground(new java.awt.Color(255, 255, 255));
		jLabel4.setText("Lösungsarchiv:");

		solutionFileField.setBackground(new java.awt.Color(0, 34, 44));
		solutionFileField.setForeground(new java.awt.Color(255, 255, 255));
		solutionFileField.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				solutionFileFieldActionPerformed(evt);
			}
		});

		solutionFileFieldChooserButton.setBackground(new java.awt.Color(0, 23, 38));
		solutionFileFieldChooserButton.setForeground(new java.awt.Color(255, 255, 255));
		solutionFileFieldChooserButton.setText("Wählen");
		solutionFileFieldChooserButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				solutionFileFieldChooserButtonActionPerformed(evt);
			}
		});

		jLabel5.setFont(new java.awt.Font("FiraCode Nerd Font Mono", 1, 14)); // NOI18N
		jLabel5.setForeground(new java.awt.Color(255, 255, 255));
		jLabel5.setText("Datei-liste:");

		fileListFileField.setBackground(new java.awt.Color(0, 34, 44));
		fileListFileField.setForeground(new java.awt.Color(255, 255, 255));
		fileListFileField.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				fileListFileFieldActionPerformed(evt);
			}
		});

		fileListFileChooserButton.setBackground(new java.awt.Color(0, 23, 38));
		fileListFileChooserButton.setForeground(new java.awt.Color(255, 255, 255));
		fileListFileChooserButton.setText("Wählen");
		fileListFileChooserButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				fileListFileChooserButtonActionPerformed(evt);
			}
		});

		jProgressBar1.setBackground(new java.awt.Color(1, 15, 25));
		jProgressBar1.setToolTipText("");
		jProgressBar1.setEnabled(false);
		jProgressBar1.setString("0/0 Abgaben fertig");
		jProgressBar1.setStringPainted(true);

		logTextPane.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
		logTextPane.setForeground(new java.awt.Color(255, 255, 255));
		logTextPane.setCaretColor(new java.awt.Color(255, 255, 255));
		logTextPane.setSelectionColor(new java.awt.Color(40, 80, 155));
		jScrollPane2.setViewportView(logTextPane);

		executeButton.setBackground(new java.awt.Color(0, 23, 38));
		executeButton.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
		executeButton.setForeground(new java.awt.Color(76, 76, 76));
		executeButton.setText("Ausführen");
		executeButton.setEnabled(false);
		executeButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				executeButtonActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
		jPanel2.setLayout(jPanel2Layout);
		jPanel2Layout.setHorizontalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel2Layout.createSequentialGroup().addGap(6, 6, 6).addGroup(jPanel2Layout
						.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
								.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
										.addComponent(jProgressBar1, javax.swing.GroupLayout.Alignment.TRAILING,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
										.addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING)
										.addGroup(jPanel2Layout.createSequentialGroup()
												.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
														javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
												.addGroup(jPanel2Layout
														.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(jPanel2Layout.createSequentialGroup()
																.addGroup(jPanel2Layout.createParallelGroup(
																		javax.swing.GroupLayout.Alignment.LEADING)
																		.addGroup(jPanel2Layout.createSequentialGroup()
																				.addComponent(submissionsFileField,
																						javax.swing.GroupLayout.PREFERRED_SIZE,
																						230,
																						javax.swing.GroupLayout.PREFERRED_SIZE)
																				.addPreferredGap(
																						javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																				.addComponent(
																						submissionsFileChooserButton))
																		.addGroup(jPanel2Layout.createSequentialGroup()
																				.addComponent(outputDirectoryField,
																						javax.swing.GroupLayout.PREFERRED_SIZE,
																						230,
																						javax.swing.GroupLayout.PREFERRED_SIZE)
																				.addPreferredGap(
																						javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																				.addComponent(
																						outputDirectoryChooserButton))
																		.addComponent(jLabel2).addComponent(jLabel3))
																.addGap(18, 18, 18)
																.addGroup(jPanel2Layout.createParallelGroup(
																		javax.swing.GroupLayout.Alignment.LEADING)
																		.addComponent(jLabel4,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				146,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addComponent(jLabel5,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				146,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addGroup(jPanel2Layout.createSequentialGroup()
																				.addComponent(fileListFileField,
																						javax.swing.GroupLayout.PREFERRED_SIZE,
																						230,
																						javax.swing.GroupLayout.PREFERRED_SIZE)
																				.addPreferredGap(
																						javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																				.addComponent(
																						fileListFileChooserButton))
																		.addGroup(jPanel2Layout.createSequentialGroup()
																				.addComponent(solutionFileField,
																						javax.swing.GroupLayout.PREFERRED_SIZE,
																						230,
																						javax.swing.GroupLayout.PREFERRED_SIZE)
																				.addPreferredGap(
																						javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																				.addComponent(
																						solutionFileFieldChooserButton))))
														.addComponent(executeButton,
																javax.swing.GroupLayout.PREFERRED_SIZE, 634,
																javax.swing.GroupLayout.PREFERRED_SIZE))
												.addGap(0, 0, Short.MAX_VALUE)))
								.addContainerGap())
						.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
								jPanel2Layout.createSequentialGroup().addGap(0, 224, Short.MAX_VALUE)
										.addComponent(JavaModeRadioButton).addGap(31, 31, 31)
										.addComponent(RacketModeRadioButton).addContainerGap(230, Short.MAX_VALUE)))));
		jPanel2Layout.setVerticalGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel2Layout.createSequentialGroup().addGap(17, 17, 17)
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(RacketModeRadioButton).addComponent(JavaModeRadioButton))
						.addGap(15, 15, 15)
						.addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
								.addGroup(jPanel2Layout.createSequentialGroup().addComponent(jLabel2)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(jPanel2Layout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
												.addComponent(submissionsFileField)
												.addComponent(submissionsFileChooserButton))
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(jLabel3)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(jPanel2Layout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
												.addComponent(outputDirectoryField)
												.addComponent(outputDirectoryChooserButton)))
								.addGroup(jPanel2Layout.createSequentialGroup().addComponent(jLabel4)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(jPanel2Layout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
												.addComponent(solutionFileField, javax.swing.GroupLayout.PREFERRED_SIZE,
														31, javax.swing.GroupLayout.PREFERRED_SIZE)
												.addComponent(solutionFileFieldChooserButton))
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(jLabel5)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addGroup(jPanel2Layout
												.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
												.addComponent(fileListFileField)
												.addComponent(fileListFileChooserButton))))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(executeButton)
						.addGap(18, 18, 18)
						.addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(jProgressBar1,
								javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addContainerGap()));

		jPanel4.setBackground(new java.awt.Color(11, 18, 35));

		saveLogLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
		saveLogLabel.setForeground(new java.awt.Color(255, 255, 255));
		saveLogLabel.setText("Log Speichern");
		saveLogLabel.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				saveLogLabelMouseClicked(evt);
			}
		});

		menuLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
		menuLabel.setForeground(new java.awt.Color(255, 255, 255));
		menuLabel.setText("Menü schließen");
		menuLabel.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				menuLabelMouseClicked(evt);
			}
		});

		settingsLabel.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
		settingsLabel.setForeground(new java.awt.Color(255, 255, 255));
		settingsLabel.setText("Einstellungen");
		settingsLabel.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				settingsLabelMouseClicked(evt);
			}
		});

		javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
		jPanel4.setLayout(jPanel4Layout);
		jPanel4Layout.setHorizontalGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel4Layout.createSequentialGroup().addContainerGap()
						.addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(saveLogLabel).addComponent(menuLabel).addComponent(settingsLabel))
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
		jPanel4Layout.setVerticalGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(jPanel4Layout.createSequentialGroup().addGap(34, 34, 34).addComponent(menuLabel)
						.addGap(31, 31, 31).addComponent(saveLogLabel)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
								javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
						.addComponent(settingsLabel).addGap(22, 22, 22)));

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(0, 0, 0)
						.addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 0,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(0, 0, 0)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
						Short.MAX_VALUE)
				.addGroup(layout.createSequentialGroup()
						.addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addGap(0, 0, 0).addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE,
								javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
				.addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
						Short.MAX_VALUE));

		pack();
	}// </editor-fold>

	public void setLanguageMode(LanguageMode lm) {
		switch (lm) {
		case JAVA:
			JavaModeRadioButton.setSelected(true);
			RacketModeRadioButton.setSelected(false);
			jLabel4.setText("Lösungsarchiv:");
			jLabel5.setText("Datei-Liste:");
			jLabel5.setEnabled(true);
			fileListFileField.setEnabled(true);
			fileListFileChooserButton.setEnabled(true);
			currentMode = JAVA;
			setTitle("FOP-Korrekturhelfer im Java-Modus");
			break;
		case RACKET:
			JavaModeRadioButton.setSelected(false);
			RacketModeRadioButton.setSelected(true);
			jLabel4.setText("Lösungsdatei:");
//			jLabel5.setEnabled(false);
			jLabel5.setText("Aufgabendatei:");
//			fileListFileField.setEnabled(false);
//			fileListFileChooserButton.setEnabled(false);
			currentMode = RACKET;
			setTitle("FOP-Korrekturhelfer im Racket-Modus");
			break;
		default:
			throw new Error("Invalid language Mode: " + lm);
		}
	}

	private void JavaModeRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {
		setLanguageMode(JAVA);
	}

	private void RacketModeRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {
		setLanguageMode(RACKET);
	}

	private void updateExecuteButtonState() {
		switch (currentMode) {
		case JAVA:
			executeButton
					.setEnabled(!"".equals(submissionsFileField.getText()) && !"".equals(outputDirectoryField.getText())
							&& !"".equals(solutionFileField.getText()) && !"".equals(fileListFileField.getText()));
			break;
		case RACKET:
			executeButton.setEnabled(!"".equals(submissionsFileField.getText())
					&& !"".equals(outputDirectoryField.getText()) && !"".equals(solutionFileField.getText()));
			break;
		}
		if (executeButton.isEnabled()) {
			executeButton.setForeground(Color.WHITE);
		} else {
			executeButton.setForeground(new Color(76, 76, 76));
		}
	}

	private void submissionsFileFieldActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		updateExecuteButtonState();
	}

	private void outputDirectoryFieldActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		updateExecuteButtonState();
	}

	private void solutionFileFieldActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		updateExecuteButtonState();
	}

	private void fileListFileFieldActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		updateExecuteButtonState();
	}

	public void toggleMenu() {
		jPanel4.setSize(menuExpanded ? 0 : 200, getHeight());
		menuExpanded = !menuExpanded;
	}

	private void MenuIconLabelMouseClicked(java.awt.event.MouseEvent evt) {
		// TODO add your handling code here:
		toggleMenu();
	}

	private void WindowResized(java.awt.event.ComponentEvent evt) {
		// TODO add your handling code here:
		menuExpanded = false;
	}

	private void menuLabelMouseClicked(java.awt.event.MouseEvent evt) {
		// TODO add your handling code here:
		toggleMenu();
	}

	private void openSettings() {
		JOptionPane.showMessageDialog(this, "Es gibt noch keine Settings!", "Information",
				JOptionPane.INFORMATION_MESSAGE);
	}

	private void settingsIconLabelMouseClicked(java.awt.event.MouseEvent evt) {
		// TODO add your handling code here:
		openSettings();
	}

	private void settingsLabelMouseClicked(java.awt.event.MouseEvent evt) {
		// TODO add your handling code here:
		openSettings();
	}

	private void saveLog() {
		if (logTextPane.getText().equals("")) {
			JOptionPane.showMessageDialog(this, "Der Log ist noch Leer.", "Error", JOptionPane.ERROR_MESSAGE);
			return;
		}
		File outputDirectory = new File(outputDirectoryField.getText());
		File logFile = outputDirectory.toPath().resolve("log.txt").toFile();
		JFileChooser chooser = new JFileChooser(outputDirectory);
		chooser.setDialogTitle("Log Speichern");
		chooser.setSelectedFile(logFile);
		int returnState = chooser.showSaveDialog(this);
		if (returnState == JFileChooser.APPROVE_OPTION) {
			try {
				Files.write(chooser.getSelectedFile().toPath(), logTextPane.getText().getBytes());
			} catch (IOException ex) {
				System.err.println("Log konnte nicht gespeichert werden.");
			}
		}
	}

	private void saveLogIconLabelMouseClicked(java.awt.event.MouseEvent evt) {
		// TODO add your handling code here:
		saveLog();
	}

	private void saveLogLabelMouseClicked(java.awt.event.MouseEvent evt) {
		// TODO add your handling code here:
		saveLog();
	}

	public void startExtraction() {
		switch (currentMode) {
		case JAVA:
			try {
				/*
				 * var cleaner = new ProjectCleaner( new File(submissionsFileField.getText()),
				 * new File(solutionFileField.getText()), new File(fileListFileField.getText()),
				 * new File(outputDirectoryField.getText()));
				 * cleaner.setCompressProjects(extractCheckBox.isSelected());
				 * cleaner.cleanSubmissions();
				 */
				var extractor = new fop.project_cleaner.SubmissionsExtractor(
						submissionsFileField.getText().equals("") ? null : new File(submissionsFileField.getText()),
						outputDirectoryField.getText().equals("") ? null : new File(outputDirectoryField.getText()),
						solutionFileField.getText().equals("") ? null : new File(solutionFileField.getText()),
						fileListFileField.getText().equals("") ? null : new File(fileListFileField.getText()), getOut(),
						getErr());
//                	extractor.extract();
				extractor.setProgressBar(jProgressBar1);
				extractor.setLanguageMode(LanguageMode.JAVA);
				extractor.execute();
			} catch (Exception ex) {
				System.err.println(ex.getMessage());
			}
			break;
		case RACKET:
			// JOptionPane.showMessageDialog(this, "Der Racket-Modus ist geplant, aber noch
			// nicht umgesetzt!", "Information", JOptionPane.INFORMATION_MESSAGE);
			try {
				var extractor = new fop.project_cleaner.SubmissionsExtractor(
						submissionsFileField.getText().equals("") ? null : new File(submissionsFileField.getText()),
						outputDirectoryField.getText().equals("") ? null : new File(outputDirectoryField.getText()),
						solutionFileField.getText().equals("") ? null : new File(solutionFileField.getText()),
						fileListFileField.getText().equals("") ? null : new File(fileListFileField.getText()), getOut(),
						getErr());
//                	extractor.extract();
				extractor.setProgressBar(jProgressBar1);
				extractor.setLanguageMode(LanguageMode.RACKET);
				extractor.execute();
			} catch (Exception ex) {
				System.err.println(ex.getMessage());
			}
			break;
		}
	}

	public void setSubmissionFile(String submissionFile) {
		submissionsFileField.setText(submissionFile);
		lastDirectory = submissionFile;
		updateExecuteButtonState();
		getOut().println("Ausgabeverzeichnis ausgewählt: " + submissionFile);
	}

	public void setSolutionFile(String solutionFile) {
		solutionFileField.setText(solutionFile);
		lastDirectory = solutionFile;
		updateExecuteButtonState();
		getOut().println("Referenzlösung ausgewählt: " + solutionFile);
	}

	public void setFileList(String fileList) {
		fileListFileField.setText(fileList);
		lastDirectory = fileList;
		updateExecuteButtonState();
		getOut().println("Dateiliste ausgewählt: " + fileList);
	}

	public void setOutputDirectory(String outputDir) {
		outputDirectoryField.setText(outputDir);
		lastDirectory = outputDir;
		updateExecuteButtonState();
		getOut().println("Ausgabeverzeichnis ausgewählt: " + outputDir);
	}

	private void executeButtonActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		startExtraction();
	}

	private void submissionsFileChooserButtonActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		JFileChooser chooser = new JFileChooser(lastDirectory == null ? submissionsFileField.getText() : lastDirectory);
		chooser.setDialogTitle("Wo liegen die studentischen Abgaben?");
		chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
		chooser.setFileFilter(new FileNameExtensionFilter("Projekt-Ordner oder ZIP-archivierte Projekte", "zip"));

		int returnState = chooser.showDialog(this, "Auswählen");
		if (returnState == JFileChooser.APPROVE_OPTION) {
			submissionsFileField.setText(chooser.getSelectedFile().getAbsolutePath());
			lastDirectory = chooser.getSelectedFile().getAbsolutePath();
			updateExecuteButtonState();
			getOut().println("Abgabeverzeichnis ausgewählt: " + chooser.getSelectedFile().getAbsolutePath());
		}
	}

	private void outputDirectoryChooserButtonActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		JFileChooser chooser = new JFileChooser(lastDirectory == null ? outputDirectoryField.getText() : lastDirectory);
		chooser.setDialogTitle("Wohin soll exportiert werden?");
		chooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

		int returnState = chooser.showDialog(this, "Auswählen");
		if (returnState == JFileChooser.APPROVE_OPTION) {
			outputDirectoryField.setText(chooser.getSelectedFile().getAbsolutePath());
			lastDirectory = chooser.getSelectedFile().getAbsolutePath();
			updateExecuteButtonState();
			getOut().println("Ausgabeverzeichnis ausgewählt: " + chooser.getSelectedFile().getAbsolutePath());
		}
	}

	private void solutionFileFieldChooserButtonActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
//		FileDialog chooser = new FileDialog(this, lastDirectory == null ? solutionFileField.getText() : lastDirectory);
//		chooser.setTitle("Wo liegt die Referenzlösung?");
//		chooser.setFilenameFilter((dir, name) -> name.endsWith(".rkt"));
//		chooser.show();
		JFileChooser chooser = new JFileChooser(lastDirectory == null ? solutionFileField.getText() : lastDirectory);
		chooser.setDialogTitle("Wo liegt die Referenzlösung?");
		chooser.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);
		chooser.setFileFilter(
				new FileNameExtensionFilter("Projekt-Ordner oder ZIP-archivierte Projekte", "zip", "rkt"));

		int returnState = chooser.showDialog(this, "Auswählen");
		if (returnState == JFileChooser.APPROVE_OPTION) {
			solutionFileField.setText(chooser.getSelectedFile().getAbsolutePath());
			lastDirectory = chooser.getSelectedFile().getAbsolutePath();
			updateExecuteButtonState();
			getOut().println("Referenzlösung ausgewählt: " + chooser.getSelectedFile().getAbsolutePath());
		}
	}

	private void fileListFileChooserButtonActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		JFileChooser chooser = new JFileChooser(lastDirectory == null ? fileListFileField.getText() : lastDirectory);
		chooser.setDialogTitle("Wo liegt die Dateiliste?");
		chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
		chooser.setFileFilter(
				new FileNameExtensionFilter("Projekt-Ordner oder ZIP-archivierte Projekte", "txt", "json"));

		int returnState = chooser.showDialog(this, "Auswählen");
		if (returnState == JFileChooser.APPROVE_OPTION) {
			fileListFileField.setText(chooser.getSelectedFile().getAbsolutePath());
			lastDirectory = chooser.getSelectedFile().getAbsolutePath();
			updateExecuteButtonState();
			getOut().println("Dateiliste ausgewählt: " + chooser.getSelectedFile().getAbsolutePath());
		}
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
		// (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the default
		 * look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(MainGui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				MainGui mg;
				switch (args.length) {
				case 4:
				case 5:
					mg = new MainGui(args[0], args[1], args[2], args[3]);
					break;
				default:
					mg = new MainGui();
					break;
				}
				if(args.length == 5) {
					mg.setLanguageMode(LanguageMode.valueOf(args[4].toUpperCase()));
				}
				mg.setVisible(true);
			}
		});

	}

	// Variables declaration - do not modify
	private javax.swing.JRadioButton JavaModeRadioButton;
	private javax.swing.JLabel MenuIconLabel;
	private javax.swing.JRadioButton RacketModeRadioButton;
	private javax.swing.ButtonGroup buttonGroup1;
	private javax.swing.JButton executeButton;
	private javax.swing.JButton fileListFileChooserButton;
	private javax.swing.JTextField fileListFileField;
	private javax.swing.JLabel jLabel1;
	private javax.swing.JLabel jLabel2;
	private javax.swing.JLabel jLabel3;
	private javax.swing.JLabel jLabel4;
	private javax.swing.JLabel jLabel5;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel3;
	private javax.swing.JPanel jPanel4;
	private javax.swing.JProgressBar jProgressBar1;
	private javax.swing.JScrollPane jScrollPane2;
	@SuppressWarnings("unused")
	private javax.swing.JSeparator jSeparator1;
	private javax.swing.JTextPane logTextPane;
	private javax.swing.JLabel menuLabel;
	private javax.swing.JButton outputDirectoryChooserButton;
	private javax.swing.JTextField outputDirectoryField;
	private javax.swing.JLabel saveLogIconLabel;
	private javax.swing.JLabel saveLogLabel;
	private javax.swing.JLabel settingsIconLabel;
	private javax.swing.JLabel settingsLabel;
	private javax.swing.JTextField solutionFileField;
	private javax.swing.JButton solutionFileFieldChooserButton;
	private javax.swing.JButton submissionsFileChooserButton;
	private javax.swing.JTextField submissionsFileField;
	// End of variables declaration
}
